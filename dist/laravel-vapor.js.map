{"version":3,"file":"laravel-vapor.js","sources":["../src/index.js"],"sourcesContent":["class Vapor\n{\n    /**\n     * Store a file in S3 and return its UUID, key, and other information.\n     */\n    async store(file, options = {})\n    {\n        let data = new FormData();\n        data.append('bucket', options.bucket || '');\n        data.append('content_type', options.contentType || file.type);\n        data.append('expires', options.expires || '');\n        data.append('visibility', options.visibility || '');\n\n        let response = JSON.parse(await function() {\n            return new Promise(function(resolve) {\n\n                let request = new XMLHttpRequest();\n                request.open('POST', '/vapor/signed-storage-url');\n\n                request.onload = () => resolve(request.response);\n\n                for (const header in options.headers) {\n                    request.setRequestHeader(header, options.headers[header]);\n                }\n\n                request.send(data);\n\n            });\n        }());\n\n        let headers = response.headers;\n\n        if ('Host' in headers) {\n            delete headers.Host;\n        }\n\n        await function() {\n            return new Promise(function(resolve) {\n\n                let request = new XMLHttpRequest();\n                request.open('PUT', response.url);\n\n                request.onload = () => resolve(request.response);\n                request.upload.onprogress = (e) => options.progress(Math.ceil((e.loaded / e.total) * 100));\n\n                for (const header in headers) {\n                    request.setRequestHeader(header, headers[header]);\n                }\n\n                request.send(file);\n\n            });\n        }();\n\n        response.extension = file.name.split('.').pop();\n\n        return response;\n    }\n}\n\nmodule.exports = new Vapor();\n"],"names":["Vapor","store","file","options","data","FormData","append","bucket","contentType","type","expires","visibility","Promise","resolve","request","XMLHttpRequest","const","header","open","onload","response","headers","setRequestHeader","send","JSON","parse","Host","url","upload","onprogress","e","progress","Math","ceil","loaded","total","extension","name","split","pop","module","exports"],"mappings":"AAAA,IAAMA,2BAKIC,eAAMC,EAAMC,kBAAU,YAEpBC,EAAO,IAAIC,gBACfD,EAAKE,OAAO,SAAUH,EAAQI,QAAU,IACxCH,EAAKE,OAAO,eAAgBH,EAAQK,aAAeN,EAAKO,MACxDL,EAAKE,OAAO,UAAWH,EAAQO,SAAW,IAC1CN,EAAKE,OAAO,aAAcH,EAAQQ,YAAc,oBAGrC,IAAIC,QAAQ,SAASC,OAEpBC,EAAU,IAAIC,mBAKbC,IAAMC,KAJXH,EAAQI,KAAK,OAAQ,6BAErBJ,EAAQK,yBAAeN,EAAQC,EAAQM,WAElBjB,EAAQkB,QACzBP,EAAQQ,iBAAiBL,EAAQd,EAAQkB,QAAQJ,IAGrDH,EAAQS,KAAKnB,2BAZjBgB,EAAWI,KAAKC,SAiBhBJ,EAAUD,EAASC,cAEnB,SAAUA,UACHA,EAAQK,qBAIR,IAAId,QAAQ,SAASC,OAEpBC,EAAU,IAAIC,mBAMbC,IAAMC,KALXH,EAAQI,KAAK,MAAOE,EAASO,KAE7Bb,EAAQK,yBAAeN,EAAQC,EAAQM,WACvCN,EAAQc,OAAOC,oBAAcC,UAAM3B,EAAQ4B,SAASC,KAAKC,KAAMH,EAAEI,OAASJ,EAAEK,MAAS,OAEhEd,EACjBP,EAAQQ,iBAAiBL,EAAQI,EAAQJ,IAG7CH,EAAQS,KAAKrB,6BAKrBkB,EAASgB,UAAYlC,EAAKmC,KAAKC,MAAM,KAAKC,MAEnCnB,0CAIfoB,OAAOC,QAAU,IAAIzC"}