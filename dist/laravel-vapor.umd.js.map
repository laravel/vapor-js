{"version":3,"file":"laravel-vapor.umd.js","sources":["../src/index.js"],"sourcesContent":["import axios from 'axios'\n\nlet assetUrlResolver = () => {\n    try {\n        return process.env.MIX_VAPOR_ASSET_URL\n            ? process.env.MIX_VAPOR_ASSET_URL\n            : '';\n    } catch (e) {\n        console.error('Unable to automatically resolve the asset URL. Use Vapor.withBaseAssetUrl() to specify it manually.')\n\n        throw e\n    }\n}\n\nclass Vapor\n{\n    /**\n     * Generate the S3 URL to an application asset.\n     */\n    asset(path) {\n        return assetUrlResolver() + '/' + path;\n    }\n\n    /**\n     * Set the base URL for assets.\n     */\n    withBaseAssetUrl(url) {\n        assetUrlResolver = () => url ? url : ''\n    }\n\n    /**\n     * Store a file in S3 and return its UUID, key, and other information.\n     */\n    async store(file, options = {}) {\n        const response = await axios.post(options.signedStorageUrl ? options.signedStorageUrl : '/vapor/signed-storage-url', {\n            'bucket': options.bucket || '',\n            'content_type': options.contentType || file.type,\n            'expires': options.expires || '',\n            'visibility': options.visibility || '',\n            ...options.data\n        }, {\n            baseURL: options.baseURL || null,\n            headers: options.headers || {},\n            ...options.options\n        });\n\n        let headers = response.data.headers;\n\n        if ('Host' in headers) {\n            delete headers.Host;\n        }\n\n        if (typeof options.progress === 'undefined') {\n            options.progress = () => {};\n        }\n\n        const cancelToken = options.cancelToken || ''\n\n        await axios.put(response.data.url, file, {\n            cancelToken: cancelToken,\n            headers: headers,\n            onUploadProgress: (progressEvent) => {\n                options.progress(progressEvent.loaded / progressEvent.total);\n            }\n        })\n\n        response.data.extension = file.name.split('.').pop()\n\n        return response.data;\n    }\n}\n\nexport default new Vapor();\n"],"names":["assetUrlResolver","process","env","MIX_VAPOR_ASSET_URL","e","console","error","Vapor","_proto","prototype","asset","path","withBaseAssetUrl","url","store","file","options","Promise","resolve","axios","post","signedStorageUrl","_extends","bucket","content_type","contentType","type","expires","visibility","data","baseURL","headers","then","response","Host","progress","put","cancelToken","onUploadProgress","progressEvent","loaded","total","extension","name","split","pop","reject"],"mappings":"oiBAEA,IAAIA,EAAmB,WACnB,IACI,OAAOC,QAAQC,IAAIC,oBACbF,QAAQC,IAAIC,oBACZ,EAKV,CAJE,MAAOC,GAGL,MAFAC,QAAQC,MAAM,uGAERF,CACV,CACJ,iCAEWG,SAAAC,EAAAD,EAAAE,iBAAAD,EAKPE,MAAA,SAAMC,GACF,OAAOX,IAAqB,IAAMW,CACtC,EAACH,EAKDI,iBAAA,SAAiBC,GACbb,EAAmB,kBAAMa,GAAY,EAAE,CAC3C,EAACL,EAKKM,eAAMC,EAAMC,YAAAA,IAAAA,EAAU,eAAIC,QAAAC,QACLC,UAAMC,KAAKJ,EAAQK,iBAAmBL,EAAQK,iBAAmB,4BAA2BC,GAC/GC,OAAUP,EAAQO,QAAU,GAC5BC,aAAgBR,EAAQS,aAAeV,EAAKW,KAC5CC,QAAWX,EAAQW,SAAW,GAC9BC,WAAcZ,EAAQY,YAAc,IACjCZ,EAAQa,MAAIP,GAEfQ,QAASd,EAAQc,SAAW,KAC5BC,QAASf,EAAQe,SAAW,IACzBf,EAAQA,WACbgB,cAVIC,GAYN,IAAIF,EAAUE,EAASJ,KAAKE,cAExB,SAAUA,UACHA,EAAQG,UAGa,IAArBlB,EAAQmB,WACfnB,EAAQmB,SAAW,cAGsBlB,QAAAC,QAEvCC,UAAMiB,IAAIH,EAASJ,KAAKhB,IAAKE,EAAM,CACrCsB,YAHgBrB,EAAQqB,aAAe,GAIvCN,QAASA,EACTO,iBAAkB,SAACC,GACfvB,EAAQmB,SAASI,EAAcC,OAASD,EAAcE,MAC1D,KACFT,gBAIF,OAFAC,EAASJ,KAAKa,UAAY3B,EAAK4B,KAAKC,MAAM,KAAKC,MAExCZ,EAASJ,IAAK,KACxB,MAAAzB,UAAAa,QAAA6B,OAAA1C,KAAAG,CAAA"}